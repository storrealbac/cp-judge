// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ------------------------------------
// Authentication & Authorization
// ------------------------------------

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ------------------------------------
// User & Related Models
// ------------------------------------

enum Role {
    USER
    MODERATOR
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    username      String?   @unique
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    role Role @default(USER)

    biography   String?
    country     String?
    institution String?

    accounts  Account[]
    sessions  Session[]
    followers Follows[] @relation("following")
    following Follows[] @relation("followers")

    problems    Problem[]    @relation("AuthorProblems")
    submissions Submission[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Follows {
    follower    User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String
    createdAt   DateTime @default(now())

    @@id([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
}

// ------------------------------------
// Problem & Related Models
// ------------------------------------

model Problem {
    id    String @id @default(cuid())
    title String
    slug  String @unique

    statement         String
    inputDescription  String
    outputDescription String

    difficulty Int
    authorId   String
    author     User   @relation("AuthorProblems", fields: [authorId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    timeLimit   Float @default(1.5) // In seconds
    memoryLimit Float @default(512) // In MB

    tags        TagOnProblem[]
    testCases   TestCase[]
    submissions Submission[]

    @@index([slug])
}

model TestCase {
    id             String   @id @default(cuid())
    problemId      String
    problem        Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
    input          String
    expectedOutput String
    createdAt      DateTime @default(now())
}

model Tag {
    id       String         @id @default(cuid())
    name     String         @unique
    problems TagOnProblem[]
}

model TagOnProblem {
    tagId     String
    problemId String

    tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
    problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

    @@id([tagId, problemId])
    @@index([problemId])
}

// ------------------------------------
// Submissions & Judge0 Integration
// ------------------------------------
enum SubmissionStatus {
    PENDING
    ACCEPTED
    WRONG_ANSWER
    RUNTIME_ERROR
    TIME_LIMIT_EXCEEDED
    MEMORY_LIMIT_EXCEEDED
    COMPILATION_ERROR
}

enum Language {
    C
    CPP
    JAVA
    PYTHON
    RUST
    GO
    JAVASCRIPT
    TYPESCRIPT
    KOTLIN
    SWIFT
    RUBY
    CSHARP
    PHP
    PERL
    BASH
    HASKELL
    SCALA
    LUA
    D
    FSHARP
    ERLANG
    ELIXIR
    OCAML
    R
    NIM
    SQL
    COBOL
    FORTH
    PASCAL
    FORTAN
    LISP
    NONE
}

model Submission {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    problemId String
    problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

    code String

    status        SubmissionStatus
    runtime       Float? // Total execution time in seconds
    memory        Float? // Total memory usage in MB
    compileOutput String? // Compilation output from Judge0
    stdout        String? // Standard output (if applicable)
    stderr        String? // Standard error output
    wallTime      Float? // Real-world execution time
    executedAt    DateTime? // Execution timestamp
    judgeToken    String? // Judge0 token for the submission
    result        String? // Raw response or summary

    language Language @default(NONE)

    createdAt DateTime             @default(now())
    testCases SubmissionTestCase[]

    @@index([userId, problemId])
    @@index([status])
}

model SubmissionTestCase {
    id             String           @id @default(cuid())
    submissionId   String
    submission     Submission       @relation(fields: [submissionId], references: [id], onDelete: Cascade)
    testCaseId     String
    input          String
    expectedOutput String
    actualOutput   String
    status         SubmissionStatus // Result for this test case
    runtime        Float? // Time for this test case
    memory         Float? // Memory usage for this test case
    createdAt      DateTime         @default(now())
}
